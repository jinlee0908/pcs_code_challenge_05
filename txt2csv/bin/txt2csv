#!/usr/bin/env ruby
# this first line is how the operating system knows to use ruby
# to execute this file
# use chmod oug+x txt2csv to make sure the file is executable

require 'thor'
require_relative '../lib/analyze'

# This class is to direct files and process to them
class Commands < Thor

  class_options %w( input -i ) => :string
  class_options %w( output -o) => :string
  class_options %w( prefix -p ) => :string 
  class_options %w( suffix -s ) => :string

  desc 'analyze', 'Initate Analyze commands'
  def analyze(*)
    # Get the input filename from the command line interface,
    # and open the file for reading
    # For each line in the incoming file,
    # Split the line on tab
    # Get the output filename from the command line interface and
    # open a histogram file for writing
    # Get the prefix or suffix option from the command line interface
    # Hand the name field to the analyze method
    # collect the reverse-sorted histogram returned from the method
    # output the histogram to the output file.
    # Close all open files

    chosen_option = options[:prefix] ? :prefix : :suffix

    inputtxt = options[:input] if options[:i] || options[:input]
    outputtxt = options[:output] if options[:o] || options[:output]

    parsed_names = []

    IO.foreach(inputtxt) { |line| parsed_names << line.scan(/[^\t\n]+/)[0] }

    txtline = parsed_names

    Analysis.histogram(chosen_option, txtline, outputtxt)
  end

  desc 'convert', 'Initate Convert commands'
  def convert(*)
    puts 'This is the convert script' 

    inputtxt = options[:input] if options[:i] || options[:input]
    outputtxt = options[:output] if options[:o] || options[:output]
    prefixtxt = options[:prefix] if options[:p] || options[:prefix]
    suffixtxt = options[:suffix] if options[:s] || options[:suffix]

    #inputfile = File.open(inputtxt)
    prefix_array = []
    IO.foreach(prefixtxt) { |line| prefix_array << line.scan(/^\S*/)[0] }
    puts prefix_array.inspect

    suffix_array = []
    IO.foreach(suffixtxt) { |line| suffix_array << line.scan(/^\S*/)[0] }
    puts suffix_array.inspect

    parsed_file = Hash.new(0)
    
    parsed_file = {name_string:[], phone_string:[], twitter_handle:[], email_address:[] }

    IO.foreach(inputtxt) { |line| 
      parsed_file[:name_string] << line.scan(/[^\t\n]+/)[0]
      parsed_file[:phone_string] << line.scan(/[^\t\n]+/)[1]
      parsed_file[:twitter_handle] << line.scan(/[^\t\n]+/)[2]
      parsed_file[:email_address] << line.scan(/[^\t\n]+/)[3]
       }
    puts parsed_file

    Parse.parse_names(prefix_array,suffix_array,parsed_file[:name_string])
    Parse.parse_twitter
    Parse.parse_email
    Parse.parse_numbers
    #sufile = File.open(suffixtxt)

    # Get the input filename from the command line interface,
    # and open the file for reading
    # Get the prefix and suffix histogram files from the command line
    # interface and open them.
    # Read the histogram files to create prefix and suffix words arrays.
    #
    # Get the output filename from the command line interface and open a CSV
    # file for writing
    # Write the column headers to the file
    # For each line in the incoming file,
    # Split the line on tabs,
    # Hand each field to the appropriate method. Use the word arrays for the
    # name parser.
    # collect the arrays returned from the methods
    # output the concatenated arrays as a string to the CSV file
    # Close all open files

  #  parsed_file = Hash.new(0)
  #  parsed_file = {name_string: '', phone_string: '', twitter_handle: '',
  #  email_address: ''}
  #
  #  File.open(inputtxt) do |file|
  #    file.each_line {|line| results = line.scan(/[^\t\n]+/)
  #    puts results
  #
  #    parsed_file[:name_string] = results[0]
  #    parsed_file[:phone_string] = results[1]
  #    parsed_file[:twitter_handle] = results[2]
  #    parsed_file[:email_address] = results[3]
  #  }
  # end
  #  puts parsed_file
  end
end

Commands.start(ARGV)
